/**
\file TMP1.cpp 
*/

/**
\fn void qSort(int A[], int high, int low) 
@function void qSort рекурсивна€ функци€ алгоритма быстрой сортировки. »меет три входных параметра.
@param A[] - целочисленный массив.
@param high - номер крайнего правого члена массива.
@param low - номер крайнего левого члена массива.
*/

#include <iostream>
#include <time.h>
using namespace std;

void qSort(int A[], int high, int low) 
{
	
	int i = low; /// присвоение значени€ low границе между "меньшими" и "равными опорныму" элементами.
	int j = high; /// присвоение значени€ high границе между "большими" и "равными опорныму" элементами.
	int mid = A[(high+low)/2]; /// выбор "опорного" элемента
	 do {
          while(A[i] < mid) ++i;  /// поиск элемента дл€ переноса в старшую часть
          while(A[j] > mid) --j;  /// поиск элемента дл€ переноса в младшую часть
          if(i <= j)
		  {           
              /// обмен элементов местами:
              int temp = A[i];
              A[i] = A[j];
              A[j] = temp;
              /// переход к следующим элементам:
              i++; j--;
          }
      } while(i < j);
	 /// если значени€ границ не совпадают с введенными параметрами, то вызываетс€ функци€ со значени€ми границ в качестве параметров и частично обработанным массивом. 
      if(low < j) qSort(A, j, low);
      if(i < high) qSort(A, high, i);
}

int main()
{
	for(int i = 0;i<10;i++)
	{
		int s;
		cin >> s;
		if(s == 0)
			break;
	srand(time(NULL)); /// прив€зка зерна генерации псевдослучайных чисел к системному времени. »спользуетс€ библиотека <time.h>.

	int Array[100]; /// объ€вление массива.
	for(int c=0;c<100;c++)
		Array[c] = 1+rand()%99; /// заполнение массива рандомными числами.
	
	qSort(Array,99,0); /// сортировка массива.

	for(int c=0;c<100;c++)
		cout << Array[c] << " ";
	/// вывод обработанного массива.

	cout << endl;
	}
}
